问题一
#台阶问题 n阶 青蛙一次1阶或者2阶
func=lambda n:n if n<=2 else func(n-1)+func(n-2)

问题二
#台阶问题改 n阶 青蛙一次1阶 2阶 ... 最多n阶
func=2**(n-1)

问题三
#矩形问题 用2*1的矩形填充2*n的矩形 
func=lambda n:n if n<=2 else func(n-1)+func(n-2)

问题四
#杨氏矩阵 step-wise线性搜索算法 判断目标是否在矩阵中
def searchMatrix(matrix,target):
  if matrix==[]:
    return False
  m=len(matrix)
  n=len(matrix[0])
  x=0
  y=n-1
  while x<m and y>-1:
    if target==matrix[x][y]:
      return True
    if target>matrix[x][y]:
      x+=1
      continue
    if target<matrix[x][y]:
      y-=1
  return False
  
问题五
#杨氏矩阵 目标在矩阵中出现了几次
def searchMatrix(matrix,target):
  if matrix==[]:
    return False
  m=len(matrix)
  n=len(matrix[0])
  x=0
  y=n-1
  count=0
  while x<m and y>-1:
    if target==matrix[x][y]:
      x+=1
      y-=1
      count+=1
      continue
    if target>matrix[x][y]:
      x+=1
      continue
    if target<matrix[x][y]:
      y-=1
  return count
  
问题六
#硬币排成线
#有n个硬币 两个玩家 从右边依次取走一或者两个硬币 判断先取硬币的玩家的输赢
def func(n):
  if n%3==0:
    return False
  return True

问题七
#二进制中有多少个1 计算一个32位整数的二进制表示中有多少个1
#反码和补码学得不太好，负数的不会算
def countOnes( num):
    n = 0
    count = 0
    if num == 0:
        return 0
    if num == 1:
        return 1

    while num > 2 ** n:
        n += 1

    for i in range(n, -1, -1):
        if num >= 2 ** i:
            num = num - 2 ** i
            count += 1
    return count
    
问题八
#fizz buzz问题
#注：在判断时先判断范围较小且被包含的部分 并且判断成立后跳出本次循环或者使用if elif 保证一次循环只输出一次
def func(n):
  for i in xrange(1,n+1):
    if i%15==0:
      print 'fizz buzz'
    elif i%3==0:
      print 'fizz'
    elif i%5==0:
      print 'buzz'


















